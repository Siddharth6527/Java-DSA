####### Serialization and Deserialization in Java #############
 Serialization is a mechanism of converting the state of an object into a byte stream.
 Deserailization is the reverse process where the byte stream is used to recreate the acutal Java object in memory.
 This mechanism is used to persist the object.

 The byte stream created is platform independent.
 So, the object serialized on one platform can be deserialized on a differnt platform.
 To make a Java object serializable we implement the java.io.Serializable interface.

 The ObjectOutputStream class contains writeObject() method for serializing an object.
 The ObjectInputStream class contains readObject() method of deserializing an object.

/////////////////////////////
// Advantages of Serialization:
 1. To save/persist state of an object.
 2. To travel an object across a network.

///////////////////////
 Only the objects of those classes can be serialized which are implmenting java.io.Serializable interface.
 Serializable is a marker interface (has no data member and method).
 It is used to "mark" java classes so that objects of these classes may get certain capability.
 Other examples of marker interfaces are:- Cloneable and Remote

////////////////////////////////////////
// Important Points:
 1. If a parent class has implemented Serialzable interface then child class doesn't need to implement it but vice-versa is not true.

 2. Only non-static data members are saved via Serilization process.

 3. Static data members and transient data members are not saved via Serialization process.
 So, if you don't want to save value of a non-static data member then make it transient.

 4. Constructor of Object is never called when an object is deserialized.

 5. Associated objects must be implementing Serializable interface.

 example:
 class A implements Serializable{

// B also implements Serializable
// interface.
B ob=new B();  
}

////////////////////////////////////////// 
// SerialVersionUID:







