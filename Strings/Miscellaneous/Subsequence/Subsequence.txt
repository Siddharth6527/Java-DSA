### Print all subsequences of a string ###

 Given a strings, we have to find out all its subsequnces of it.
 A String is a subsequence of a given String, that is generated by deleting some character of a given string without changging its order.

 ///////////////
 // 1st Method:
 Pick and Unpick

 // refer code folder.
 pseudo code:
 priavte static void findsubsequences(String s, String ans){
 if(s.length()==0){
  al.add(ans);
  return;
 }

 // we add adding 1st character in string
 findsubsequences(s.substring(1), ans+s.charAt(0));

 // not adding first charcter of the string
 // because the concept of subsequence either
 // character will present or not
 findsubsequences(s.substring(1),ans);
 }

 ///
 Time Complexity: O(2^N)
 The time complexity of this approach is O(2^N),
 where n is the length of the given string.
 This is because, for a stirng of length n, we are generating a total of 2^N subsequences.

 Space Complexity: O(N)
 The recursive function call stack requires O(N) space for the worst case, where n is the length of the given string.

 ///////////////////////////////////
 Method 2:
 Note: This method does not handle dupicate characters.

 Step 1: Iterate over the entire string.
 Step 2: Iterate from the end of string in order to generate different substring add the substring to the list.
 Step 3: Drop kth character from the substring obtained from above to generate different subsequence.
 Step 4: if the subsequence is not in the list then recur.

 Time Complexity: O(N^3)
 Auxiliary Space: O(N)

 /////////////////////////////////////////////
 Method 3: One by one fix characters and recursively generate all subsets starting from them.
 After every recursive call, we remove the last character so that the next permutation can be generated.

 O(n * 2n), where n is the size of the given string
Auxiliary Space: O(n), due to recursive call stack






 
 
