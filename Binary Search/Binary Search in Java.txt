### Binary Search in Java ###
 
 Binary search is one of the searching techniques applied when the input is sorted here we are focusing on finding the middle element that acts as reference frame whether to go left or right to it as the elements are already sorted.
 This searching helps in optimizing the search technique with every iteration is referred to as binary search and readers do stress over it as it is indirectly applied in solving questions.

 Binary Search Algorithm:
 1. Start
 2. Take input array and Target
 3. Initialise start = 0 and end = (array size -1)
 4. Initialise mid variable
 5. mid = (start+end)/2
 6. if array[mid] == target then return mid
 7. if array[mid] < target then start = mid+1
 8. if array[mid] > target then end = mid-1
 9. if start<=end then goto step 5
 10. return -1 as Not element found
 11. Exit

 /////////////////////////////////////
 Now you must be thinking what is the input is not sorted then the results are undefined.

 Note: If there are duplicates, there is no guarantee which onoe will be found.

 Methods for Java Binary Search:
 1. Iterative Method
 2. Recursive Method
 3. Inbuild Method

 // refer code folder for example

 Time Complexity: O(log N)
 Space Complexity: O(1), if the recursive call stack is considerd then the auxiliary space will be O(logN )

 3: In Build Method for Binary Search in Java:
 Arrays.binarySearch() works for arrays which can be of primitive data type also.

 ///////////////////
 BINARY SEARCH IN JAVA COLLECTIONS:
 Now let us see how Collections.binarySearch() work for LinkedList.
 So basically as discussed above this method runs in log(n) time for a "random access" list like ArrayList.
 If the specified list does not implement the RandomAccess interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) elmement comparisons.

 Collections.binarysearch() works for objects Collections like ArrayList and LinkedList.





 




 
