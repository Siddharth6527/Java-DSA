############################# Hashing #########################
 Hashing is a technique or process of mapping keys, and values into the hash table by using a hash function.
 It is done for faster access to elements.
 The efficiency of mapping depends on the efficiency of the hash function used.

 Let a Hash Function H(x) maps the value x at the index x%10
 in an Array.
 For example, if the list of values is [11,12,13,14,15] it will be stored at positions {1,2,3,4,5} in the array or Hash Table respectively.

/////////////////////////////////////////////////////////////////
###################### WHAT IS HASHING? ########################
 Hashing refers to the process of generating a fixed-size output from an input of varaible size using the mathematical formulas as hash functions.
 This technique determines an index or location for the storage of an item in data structure.

////////////////////
// Need for Hash Data structure:
 The amount of data on the internet is growing exponentially everyday, making it difficult to store it all efficiently.
 In day-to-day programming, this amount of data might not be that big, but still needs to be stored, accessed, and processed easily and efficiently.
 A very common data structure that is used for such purpose is the Array data structure.

 Now the question arises if Array was already there, what was the need for a new data structure.
 The answer to this is in the word "efficiency".
 Though storing in Array takes O(1) time, searching in it takes at least O(log n) time.
 This time apperps to be small, but for large data sets, it can cause a lot of problems and this, in turn makes the Array data structure inefficient.

 So now we are looking for a data structure that can store the data and search in it in constant time, i.e. in O(1) time.
 This his how hashing data struture came into play.
 With introduction of Hash Data struture, it is now possible to easily store data in constant time and retrieve them in constant time as well.

///////////////////////////////////
// Components of Hashing:
 There are majorly three components of Hashing:
 1. Key: A key can be anything string or integer, which is fed as input as input in the hash function the technique that determines an index or location for storage of an item in a data struture.

 2. Hash Function: The hash function recevives the input key and returns the index of an element in an array called a hash table.
 The index is known as the Hash index.

 3. Hash Table: Hash table is a data struture that maps keys to values using a special function called a hash function.
 Hash stores the data in an associative manner in an array where each data value has its own unique index.

///////////////////////////////////////
// What is Collision?
 The hashing process generates a small number for a big key, so there is a possibility that two keys could produce the same value.
 The situation where the newly inserted key maps to an already occupied, and it must be handled using some collision handling technology.

////////////////////////////////////
// Advantages of Hashing in Data Struture:
 1. Key-value Support: Hashing is ideal for implementing key-value data structure.

 2. Fast-data retrieval: Hashing allows for quick access to elements with constant-time compleixty.

 3. Efficiency: Insertion, deletion, and searching operations are highly efficient.

 4. Memory usage reduction: Hashing required less memory as it allocates a fixed space for storing elements.

 5. Scalability: Hashing performs well with large data sets, maintaining constant accesst time.

 6. Security and encryption: Hashing is essential for secure data storage and integrity verification.

///////////////////////////////////////////////////////////////
###################### INDEX MAPPING (or Trivial Hashing) with negatives allowed #####################################

 Index Mapping (also known as Trivial Hashing) is a simple form of hashing where the data is directly mapped to an index in a hash table.
 The hash function used in this method is typically the identity function, which maps the input data to itself.
 In this case, the key of the data is used as the index in the hash table, and the value is stored at that index.

 For example, if we have a hash table of size 10 and we want to store the value "apple" with the key "a", the trivial hashing function would simply map the key "a" to the index "a" in the hashtable, and store the value "apple" at that index.

 One of the main advantages of Index Mapping is its simplicity.
 The hash function is easy to understand and implement, and the data can be easily retireved using the key.
 However, it has some limitations. 
 The main disadvantage is that it can only be used for small data sets, as the size of the hash table has to be the same as the number of keys.
 Additionally, it doesn't handle collisions, so if two keys map to same index, one of the data would be overwritten.

 Given a limited range array contains both positive and non-positive number, i.e., elements are in the range from -MAX to +MAX.
 Out task is to search if some number is present in the array or not in O(1) time.
 Since the range is limited, we can use index mapping (or trivial hashing).
 We use values as the index in a big array.
 Therefore we can search and insert elements in O(1) time.

 How to handle negative numbers?
 The ides is to use a 2D array of size hash[MAX+1][2].

 Algorithm: 
 Assign all the values of the hash matrix as 0.
 Traverse the given array:
  If the element ele is non negative Assign 
   hash[ele][0] as 1.
  Else take the absolute value of ele and 
   assign hash[ele][1] as 1.

  To search any element x in the array:
  1. If X is non-negative check if hash[X][0] is 1 or not.
  If hash[X][0] is one then the number is present else not present.
  2. If X is negative take the absolute value of X and then check if hash[X][1] is 1 or not.
  If hash[X][1] is one then the number is present.

// refer IndexMapping.java for code
 
 Time Complexity: The time complexity of the above algorithms is O(N), where N is the size of the given array.
 Space Complexity: The space complexity of the above algorithm is O(N), because we are using an array of max size.




 
