///////////////
// Fractional Knapsack Problem
 Given the weights and profits of N items, in the form of {profit, weight} put these items in knapsack of capacity W to get the the maximum total profit in the knapsack.
 In Fractional Knapsack, we can break items for maximizing the total value of the knapsack.

 for example:
 Input: arr[] ={{60, 10}, {100, 20}, {120, 30}}, W=50
 Output: 240
 Explanation: By taking items of weight 10 and 20 kg and  2/3 fraction of 30 kg.
 Hence total price will be 60+100+(2/3)(120) = 240

 Input: arr[] = {{500, 30}}, W=10
 Output: 166.667

 //////////////////////
 // 1.Naive Approach: To solve the problem by trying all possible subsets with all different fractions.
 Time Compleixty: O(2^N)
 Auxiliary Space: O(N)

 //////////////////////
 // 2. Using Greedy Algorithm:
 The basic idea of the greedy approach is to calculate the ratio profit/weight for each item and sort the item on the basis of this ratio.
 Then take the item with the highest ratio and add them as much as we can (can be the whole element or a fraction of it.)

 This will always give the maximum profit because, in each step it adds an element such that this is the maximum posssible profit for that much weight.

///////////////////////////////////
// Illustration:
 Check the example: arr[] = {{100,20}, {60, 10}, {120, 30}}, W=50
 Sorting: Initailly sort the array based on the profit/weight ratio.
 The sorted array will be {{60,10}, {100,20}, {120,30}}.

 Iteration:
 1. For i=0, weight = 10 which is less than W. So add this element in the knapsack, profit = 60 and remaining W = 50-10= 40.

 2. For i=1, weight = 20 which is less than W. So add this element too. profit =60+100 =160 and remaining W = 40-20= 20.

 3. For i=2, weight = 30 is greater than W. So add 20/30 fraction = 2/3 fraction of the element.
 Therefore, profit = 2/3*120 + 160 = 80+160 =240 and remaining W becomes 0.

 So the final profit becomes 240 for W = 50.

///////////////////////////////////
// Algorithm:
 1. Calculate the ratio (profit/weight) for each item.
 2. Sort all the items in decreasing order of the ratio.
 3. Initialize res = 0, curr_cap = given_cap.
 4. Do the follwing for every item i in the sorted order:
  i. If the weight of the current item is less than or equal to the reamining capacity then add the value of that item into the result.
  ii. Else add the current item as much as we can and break out the loop.

5. Return res.

//////////////////////////////////////////////////////////////////// Coded Implementation in JAVA:
// refer to code folder

Time Complexity: O(N*logN)
Auxiliary Space: O(N)






