### TreeMap ###
 
 The TreeMap in Java is used to implement Map interface and NavigableMap along with the AbstractMap class.
 The map is sorted according to the natrual ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.

 This proves to be an efficient way of sorting and storing the key-value paris.
 The storing order maintained by the treemap must be consistent with equals just like any other sorted map, irrespective of the explicit comparators.

 The treemap implementation is not synchroized in the sense that if a map is accessed by mutliple threads, concurrently in the sense that if a map is accessed by multiple threads, concurrently and atleast one of the threads modifies the map structurally, it must be synchronized externally.

 The TreeMap in Java is concrete implementation of the java.util.SortedMap interface.
 It provides an ordered collection of key-value pairs, where the keys are ordered based on their natural order or a custom Comparator passed to the constructor.

 A TreeMap is implemented using a Red-Black Tree, which is a type of self-balancing binary search tree.
 This proves efficient performance for common operations such as adding, removing, and retrieving elements, with an average time complexity of O(log n).

 //////////////////////////
 Features of a TreeMap:
 1. This class is a memeber of the Java Collections Framework.
 2. The class implements Map interfaces including NavigableMap, SortedMap, and exntends AbstractMap class.
 3. TreeMap in Java does not allow null keys (like Map) and thus a NullPointerException is thrown.
 However, multiple null values can be associated with different keys.

 ////////////////////////////////
 How does the Treemap workd internally?
 The methods in a TreeMap while getting keyset and values, return an iterator that is fail-fast in nature.
 Thus, any concurent modification will throw ConcurrentModificationeException.
 A TreeMap is based upon a red-black tree data structure.

 Each node is the tree has:
 3 Variables (key, value, boolean color)
 3 References (left, right, parent)

 


